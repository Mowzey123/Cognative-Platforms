"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ConsumerMessage = /** @class */ (function () {
    function ConsumerMessage(_a) {
        var topic = _a.topic, key = _a.key, value = _a.value;
        this._topic = topic;
        this._key = key;
        this._value = value;
    }
    Object.defineProperty(ConsumerMessage.prototype, "size", {
        get: function () {
            return this._size;
        },
        set: function (value) {
            this._size = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ConsumerMessage.prototype, "topic", {
        get: function () {
            return this._topic;
        },
        set: function (value) {
            this._topic = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ConsumerMessage.prototype, "offset", {
        get: function () {
            return this._offset;
        },
        set: function (value) {
            this._offset = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ConsumerMessage.prototype, "partition", {
        get: function () {
            return this._partition;
        },
        set: function (value) {
            this._partition = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ConsumerMessage.prototype, "key", {
        get: function () {
            return this._key;
        },
        set: function (value) {
            this._key = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ConsumerMessage.prototype, "value", {
        get: function () {
            return this._value;
        },
        set: function (value) {
            this._value = value;
        },
        enumerable: true,
        configurable: true
    });
    return ConsumerMessage;
}());
exports.ConsumerMessage = ConsumerMessage;
var ConsumerConfig = /** @class */ (function () {
    function ConsumerConfig(host, port, groupId) {
        this.BOOTSTRAP_SERVERS_HOST = host;
        this.BOOTSTRAP_SERVERS_PORT = port;
        this.GROUP_ID = groupId;
    }
    ConsumerConfig.prototype.toRDKafka = function () {
        return {
            "metadata.broker.list": this.BOOTSTRAP_SERVERS_HOST + ":" + this.BOOTSTRAP_SERVERS_PORT,
            "group.id": this.GROUP_ID
        };
    };
    return ConsumerConfig;
}());
exports.ConsumerConfig = ConsumerConfig;
var SimpleConsumer = /** @class */ (function () {
    function SimpleConsumer() {
    }
    SimpleConsumer.prototype.create = function (Consumer, topics, config) {
        var rdkafkaConfig = config.toRDKafka();
        this.consumer = new Consumer(rdkafkaConfig);
        this.topics = topics;
        this.handlers = [];
        return this;
    };
    SimpleConsumer.prototype.connect = function () {
        var _this = this;
        return new Promise(function (resolve, reject) {
            if (_this.connected) {
                reject(new Error("Already connected"));
            }
            else {
                _this.consumer.on("ready", function () {
                    _this.connected = true;
                    _this.connecting = false;
                    _this.subscribe(_this.topics);
                    resolve(_this);
                });
                _this.consumer.on("event.error", function (err) {
                    _this.onError(err);
                });
                _this.consumer.connect({}, function (err, res) {
                    if (err)
                        return reject(err);
                });
                _this.connecting = true;
            }
        });
    };
    SimpleConsumer.prototype.subscribe = function (topics) {
        this.consumer.subscribe(topics);
        this.consumer.consume();
    };
    SimpleConsumer.prototype.onMessage = function (handler) {
        this.handlers.push(handler);
        this.consumer.on("data", function (msg) { return handler(new ConsumerMessage(msg)); });
        return this;
    };
    SimpleConsumer.prototype.onError = function (err) {
        console.error("[SimpleConsumer] - ", err);
    };
    SimpleConsumer.prototype.onDisconnect = function (cb) {
        this.consumer.on("disconnected", cb);
    };
    return SimpleConsumer;
}());
exports.SimpleConsumer = SimpleConsumer;
