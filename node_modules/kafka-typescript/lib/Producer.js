"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ProducerConfig = /** @class */ (function () {
    function ProducerConfig(host, port) {
        this.BOOTSTRAP_SERVERS_HOST = host;
        this.BOOTSTRAP_SERVERS_PORT = port;
    }
    ProducerConfig.prototype.toRDKafka = function () {
        return {
            "metadata.broker.list": this.BOOTSTRAP_SERVERS_HOST + ":" + this.BOOTSTRAP_SERVERS_PORT
        };
    };
    return ProducerConfig;
}());
exports.ProducerConfig = ProducerConfig;
var SimpleProducer = /** @class */ (function () {
    function SimpleProducer() {
    }
    SimpleProducer.prototype.getTopic = function () {
        return this.topic;
    };
    SimpleProducer.prototype.setTopic = function (value) {
        this.topic = value;
    };
    SimpleProducer.prototype.create = function (Producer, config) {
        var rdkafkaConfig = config.toRDKafka();
        this.producer = new Producer(rdkafkaConfig);
        this.config = config;
        return this;
    };
    SimpleProducer.prototype.connect = function () {
        var _this = this;
        return new Promise(function (resolve, reject) {
            if (_this.connected) {
                resolve(_this);
            }
            else {
                _this.producer.connect({}, function (err, res) {
                    if (err)
                        return reject(err);
                });
                _this.connecting = true;
                _this.producer.on("ready", function () {
                    _this.connected = true;
                    _this.connecting = false;
                    resolve(_this);
                });
                _this.producer.on("event.error", function (err) {
                    if (!_this.connected) {
                        return reject(err);
                    }
                    _this.onError(err);
                });
            }
        });
    };
    SimpleProducer.prototype.send = function (key, value, topic) {
        var _this = this;
        var t = this.topic || topic;
        if (!this.connected) {
            this.connect()
                .then(function (_) { return _this.producer.produce(t, null, value, key); });
        }
        this.producer.produce(t, null, value, key);
        return this;
    };
    SimpleProducer.prototype.onError = function (err) {
        console.error("[SimpleProducer] - ", err);
    };
    return SimpleProducer;
}());
exports.SimpleProducer = SimpleProducer;
