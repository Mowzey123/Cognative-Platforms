/// <reference types="node" />
export interface IProducer {
    connect(): Promise<this>;
    onError(err: Error): void;
    send(key: any, value: Buffer, topic?: string): IProducer;
}
export interface IKafkaConfig {
    BOOTSTRAP_SERVERS_HOST: string;
    BOOTSTRAP_SERVERS_PORT: string;
}
export interface IProducerConfig extends IKafkaConfig {
    toRDKafka(): object;
}
export declare class ProducerConfig implements IProducerConfig {
    BOOTSTRAP_SERVERS_HOST: string;
    BOOTSTRAP_SERVERS_PORT: string;
    constructor(host: string, port: string);
    toRDKafka(): object;
}
export interface IProducerConstructor {
    new (config: object): any;
}
export declare class SimpleProducer implements IProducer {
    getTopic(): string;
    setTopic(value: string): void;
    connecting: boolean;
    connected: boolean;
    producer: any;
    topic: string;
    config: ProducerConfig;
    create(Producer: IProducerConstructor, config: ProducerConfig): this;
    connect(): Promise<this>;
    send(key: any, value: Buffer, topic?: string): this;
    onError(err: Error): void;
}
