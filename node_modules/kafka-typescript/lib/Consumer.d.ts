/// <reference types="node" />
import { IKafkaConfig } from "./Producer";
export interface IConsumer {
    connect(): Promise<this>;
    onError(err: Error): void;
    onMessage(handler: IMessageHandler): any | void;
}
export interface IConsumerConfig extends IKafkaConfig {
    GROUP_ID: string;
    toRDKafka(): object;
}
export interface IConsumerMessage {
    value: Buffer;
    size: number;
    topic: string;
    offset: number;
    partition: number;
    key: any;
}
export declare class ConsumerMessage implements IConsumerMessage {
    private _size;
    private _topic;
    private _offset;
    private _partition;
    private _key;
    private _value;
    constructor({topic, key, value}: {
        topic: string;
        key: any;
        value: Buffer;
    });
    size: number;
    topic: string;
    offset: number;
    partition: number;
    key: any;
    value: Buffer;
}
export interface IMessageHandler {
    (IConsumerMessage: any): any | void;
}
export declare class ConsumerConfig implements IConsumerConfig {
    GROUP_ID: string;
    BOOTSTRAP_SERVERS_HOST: string;
    BOOTSTRAP_SERVERS_PORT: string;
    constructor(host: string, port: string, groupId: string);
    toRDKafka(): object;
}
export interface IConsumerConstructor {
    new (config: object): any;
}
export declare class SimpleConsumer implements IConsumer {
    handlers: Array<IMessageHandler>;
    connecting: boolean;
    connected: boolean;
    consumer: any;
    topics: Array<string>;
    create(Consumer: IConsumerConstructor, topics: Array<string>, config: ConsumerConfig): this;
    connect(): Promise<this>;
    private subscribe(topics);
    onMessage(handler: IMessageHandler): this;
    onError(err: Error): void;
    onDisconnect(cb: Function): void;
}
