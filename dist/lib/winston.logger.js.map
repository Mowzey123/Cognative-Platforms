{"version":3,"sources":["lib/winston.logger.js"],"names":["Object","defineProperty","exports","value","path","require","fs","winston_1","config_1","data_1","winstonLogger","logDirectory","join","__dirname","process","env","LOG_DIR","existsSync","default","makeDir","tolog","createWriteStream","flags","logger","createLogger","level","LOG_LEVEL","format","combine","timestamp","printf","info","message","json","transports","Console","File","filename"],"mappings":"AAAA;;;;;;;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,IAAMC,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB;;AACA,IAAMC,EAAE,GAAGD,OAAO,CAAC,IAAD,CAAlB;;AACA,IAAME,SAAS,GAAGF,OAAO,CAAC,SAAD,CAAzB;;AACA,IAAMG,QAAQ,GAAGH,OAAO,CAAC,kBAAD,CAAxB;;AACA,IAAMI,MAAM,GAAGJ,OAAO,CAAC,QAAD,CAAtB;;IACMK,a;;;AACF,2BAAc;AAAA;;AACV,SAAKC,YAAL,GAAoB,EAApB;AACA,SAAKA,YAAL,GAAoBP,IAAI,CAACQ,IAAL,CAAUC,SAAV,EAAqB,KAArB,EAA4BC,OAAO,CAACC,GAAR,CAAYC,OAAxC,CAApB;AACAV,IAAAA,EAAE,CAACW,UAAH,CAAc,KAAKN,YAAnB,KAAoCF,MAAM,CAACS,OAAP,CAAeC,OAAf,CAAuB,KAAKR,YAA5B,CAApC;AACH;;;;mCACcS,K,EAAO;AAClBd,MAAAA,EAAE,CAACe,iBAAH,CAAqBjB,IAAI,CAACQ,IAAL,CAAU,KAAKD,YAAf,EAA6B,oBAA7B,CAArB,EAAyE;AAAEW,QAAAA,KAAK,EAAE;AAAT,OAAzE;AACA,UAAMC,MAAM,GAAGhB,SAAS,CAACiB,YAAV,CAAuB;AAClCC,QAAAA,KAAK,EAAEjB,QAAQ,CAACkB,SAAT,KAAuB,aAAvB,GAAuC,OAAvC,GAAiD,MADtB;AAElCC,QAAAA,MAAM,EAAEpB,SAAS,CAACoB,MAAV,CAAiBC,OAAjB,CAAyBrB,SAAS,CAACoB,MAAV,CAAiBE,SAAjB,CAA2B;AACxDF,UAAAA,MAAM,EAAE;AADgD,SAA3B,CAAzB,EAEJpB,SAAS,CAACoB,MAAV,CAAiBG,MAAjB,CAAwB,UAAAC,IAAI;AAAA,2BAAOA,IAAI,CAACF,SAAZ,cAAyBE,IAAI,CAACN,KAA9B,eAAwCM,IAAI,CAACC,OAA7C;AAAA,SAA5B,CAFI,EAEiFzB,SAAS,CAACoB,MAAV,CAAiBM,IAAjB,EAFjF,CAF0B;AAKlCC,QAAAA,UAAU,EAAE,CACR,IAAI3B,SAAS,CAAC2B,UAAV,CAAqBC,OAAzB,EADQ,EAER,IAAI5B,SAAS,CAAC2B,UAAV,CAAqBE,IAAzB,CAA8B;AAAEC,UAAAA,QAAQ,EAAEjC,IAAI,CAACQ,IAAL,CAAU,KAAKD,YAAf,EAA6B,oBAA7B;AAAZ,SAA9B,CAFQ;AALsB,OAAvB,CAAf;AAUAY,MAAAA,MAAM,CAACQ,IAAP,CAAYX,KAAZ;AACH;;;;;;AAEL,IAAMG,MAAM,GAAG,IAAIb,aAAJ,EAAf;AACAR,OAAO,CAACgB,OAAR,GAAkBK,MAAlB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst path = require(\"path\");\nconst fs = require(\"fs\");\nconst winston_1 = require(\"winston\");\nconst config_1 = require(\"../config/config\");\nconst data_1 = require(\"./data\");\nclass winstonLogger {\n    constructor() {\n        this.logDirectory = '';\n        this.logDirectory = path.join(__dirname, '../', process.env.LOG_DIR);\n        fs.existsSync(this.logDirectory) || data_1.default.makeDir(this.logDirectory);\n    }\n    logWithWinston(tolog) {\n        fs.createWriteStream(path.join(this.logDirectory, 'configuredlogs.log'), { flags: 'a' });\n        const logger = winston_1.createLogger({\n            level: config_1.LOG_LEVEL === 'development' ? 'debug' : 'info',\n            format: winston_1.format.combine(winston_1.format.timestamp({\n                format: 'YYYY-MM-DD HH:mm:ss'\n            }), winston_1.format.printf(info => `${info.timestamp} ${info.level}: ${info.message}`), winston_1.format.json()),\n            transports: [\n                new winston_1.transports.Console(),\n                new winston_1.transports.File({ filename: path.join(this.logDirectory, 'configuredlogs.log') })\n            ]\n        });\n        logger.info(tolog);\n    }\n}\nconst logger = new winstonLogger();\nexports.default = logger;\n"],"file":"winston.logger.js"}