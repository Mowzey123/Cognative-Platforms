{"version":3,"sources":["index.js"],"names":["Object","defineProperty","exports","value","express","require","helmet","compression","cors","config","bodyParser","morgan_logger_1","module_1","indexRoutes_1","UserRoutes_1","streamingRoutes_1","Server","typeDefs","gql","resolvers","Query","hello","app","routes","set","PORT","use","json","urlencoded","extended","server","ApolloServer","morganLogger","applyMiddleware","default","listen","get","console","log","graphqlPath","start"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst express = require(\"express\");\nconst helmet = require(\"helmet\");\nconst compression = require(\"compression\");\nconst cors = require(\"cors\");\nconst config = require(\"./config/config\");\nconst bodyParser = require(\"body-parser\");\nconst morgan_logger_1 = require(\"./lib/morgan.logger\");\nconst module_1 = require();\n// Routes\nconst indexRoutes_1 = require(\"./routes/indexRoutes\");\nconst UserRoutes_1 = require(\"./routes/users/UserRoutes\");\nconst streamingRoutes_1 = require(\"./routes/streamingRoutes\");\nclass Server {\n    //testing\n    constructor() {\n        // Construct a schema, using GraphQL schema language\n        this.typeDefs = module_1.gql `\n            type Query {\n                hello: String\n            }\n        `;\n        // Provide resolver functions for your schema fields\n        this.resolvers = {\n            Query: {\n                hello: () => 'Hello world!',\n            },\n        };\n        this.app = express();\n        this.config();\n        this.routes();\n    }\n    config() {\n        // Server Settings and middleware\n        this.app.set('port', config.PORT || 4000);\n        this.app.use(bodyParser.json());\n        this.app.use(express.json());\n        this.app.use(express.urlencoded({ extended: false }));\n        this.app.use(helmet());\n        this.app.use(compression());\n        this.app.use(cors());\n        this.server = new module_1.ApolloServer({ typeDefs: this.typeDefs, resolvers: this.resolvers });\n        new morgan_logger_1.morganLogger(this.app);\n        this.server.applyMiddleware({ app: this.app });\n    }\n    routes() {\n        //adding imported routes to middleware\n        this.app.use('/', indexRoutes_1.default);\n        this.app.use('/users', UserRoutes_1.default);\n        this.app.use('/kafka', streamingRoutes_1.default);\n    }\n    //start running server on port\n    start() {\n        this.app.listen(this.app.get('port'), () => {\n            console.log(`Server Is Listening On Port ${this.server.graphqlPath}`, this.app.get('port'));\n        });\n    }\n}\nconst server = new Server();\nserver.start();\nexports.default = server.app;\n"],"file":"index.js"}